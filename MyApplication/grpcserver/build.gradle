apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.1"

    packagingOptions {
        pickFirst 'META-INF/INDEX.LIST'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/io.netty.versions.properties'
    }



    defaultConfig {
        applicationId "com.example.grpcserver"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        jumboMode true
    }
}


protobuf {
//配置生成的java类的根目录
    generatedFilesBaseDir = "$projectDir/src/"
    //  自定义protoc编译器 Configure the protoc executable  配置protoc编译器以及编译器的版本
    protoc {
        //这个也存在工具的兼容性的问题,一般使用com.google.protobuf:protoc:3.0.0
//        artifact = "com.google.protobuf:protoc:3.7.1"
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }

    //指定protoc运行插件  一般有如下两种
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0'
        }
//        javalite {
//            // The codegen for lite comes as a separate artifact
//            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
//        }
    }
   //自定义代码生成任务
    generateProtoTasks {
        all().each { task ->
            // protoc编译配置，如果配置生成java、cpp、python等语言
            task.builtins {
                //依据proto文件生成的Java语言的类
                java{}
                //依据proto文件生成的python语言的模块
//                python{}
                //依据proto文件生成的C语言的类
//                cpp{}
                // If you wish to avoid generating Java files:  不想生成Java代码可以使用下面这个
//                remove java
            }
            //protoc编译插件配置，如配置grpc插件等。 此处配置的插件必须在 protobuf.plugins 中预先定义
            task.plugins {
                //如果是下面这个，就需要指定artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
//                javalite {}
                //如果是GRPC就使用下面这个  如果是GRPC，那么前面的plugins就需要指定 artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0'
                grpc{}
            }
        }
    }

    //需要添加这句
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.+'

    testCompile 'junit:junit:4.12'

    compile 'com.android.support:multidex:1.0.0'

    compile 'io.grpc:grpc-netty:1.1.2'
    compile 'io.grpc:grpc-protobuf:1.1.2'
    compile 'io.grpc:grpc-stub:1.1.2'
    compile 'javax.annotation:javax.annotation-api:1.2'


//    compile 'io.grpc:grpc-netty-shaded:1.20.0'
//    compile 'io.grpc:grpc-netty:1.1.2'
////    compile 'io.grpc:grpc-netty:1.2.0'
////    compile 'io.grpc:grpc-protobuf:1.20.0'
////    compile 'io.grpc:grpc-protobuf-lite:1.1.2'
////    compile 'io.grpc:grpc-stub:1.20.0'
//    compile 'io.grpc:grpc-okhttp:1.15.1'
////    compile 'javax.annotation:javax.annotation-api:1.2'
////    compile 'io.grpc:grpc-netty:1.2.0'
//    compile 'io.grpc:grpc-protobuf-lite:1.1.2'
//    compile 'io.grpc:grpc-stub:1.1.2'
//    compile 'javax.annotation:javax.annotation-api:1.2'
////    compile 'com.google.protobuf:protobuf-javalite:3.8.0'
//    compile 'io.grpc:grpc-protobuf:1.20.0'
//    compile 'io.grpc:grpc-stub:1.20.0'
}
